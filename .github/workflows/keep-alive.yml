name: keep-alive

on:
  schedule:
    # every 10 hours: at minute 0 of hours 0,10,20
    - cron: '0 0,10,20 * * *'
  workflow_dispatch:

jobs:
  ping:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          set -euo pipefail
          npm init -y
          npm i playwright@latest --no-audit --no-fund --silent
          # install required browsers/deps
          npx playwright install --with-deps

      - name: Playwright page load check
        continue-on-error: true
        env:
          URL: "https://justpark-earnings.streamlit.app/"
        run: |
          set -euo pipefail
          # ensure previous artifacts removed
          rm -f playwright-status.txt screenshot.png || true
          node - <<'NODE'
          const { chromium } = require('playwright');
          (async () => {
            const url = process.env.URL;
            console.log('Visiting', url);
            let browser;
            let status = 0;
            try {
              browser = await chromium.launch({ args: ['--no-sandbox','--disable-setuid-sandbox'] });
              const context = await browser.newContext();
              const page = await context.newPage();
              const response = await page.goto(url, { waitUntil: 'load', timeout: 30000 }).catch(e => null);
              if (!response) {
                console.error('No response received');
                status = 2;
              } else {
                status = response.status();
                console.log('HTTP status:', status);
              }
              // wait a short while for any dynamic content
              await page.waitForTimeout(3000).catch(() => {});
              const title = await page.title().catch(() => null);
              console.log('Title:', title);
              
              // Interact with the page - look for password input and enter some text
              try {
                console.log('Looking for password input field...');
                const passwordInput = await page.locator('input[type="password"]').first();
                if (await passwordInput.isVisible({ timeout: 5000 }).catch(() => false)) {
                  console.log('Found password input, interacting with it...');
                  await passwordInput.click();
                  await passwordInput.fill('test-interaction-text');
                  await page.keyboard.press('Enter');
                  console.log('Interacted with password field and pressed Enter');
                  // wait a bit after interaction
                  await page.waitForTimeout(2000).catch(() => {});
                } else {
                  console.log('Password input not found or not visible');
                }
              } catch (interactionErr) {
                console.log('Error during page interaction:', interactionErr.message);
              }
              
              // Always capture screenshot
              try {
                await page.screenshot({ path: 'screenshot.png', fullPage: true });
                console.log('Saved screenshot.png');
              } catch (sErr) {
                console.error('Failed to capture screenshot:', sErr);
              }
              
              if (!(status >= 200 && status < 400)) {
                console.log('Page had non-success status');
              } else {
                console.log('Page loaded successfully');
                status = 0;
              }
            } catch (err) {
              console.error('Error during page load:', err);
              status = 4;
            } finally {
              if (browser) await browser.close().catch(() => {});
              // write status file for subsequent steps
              const fs = require('fs');
              fs.writeFileSync('playwright-status.txt', String(status));
              console.log('Wrote playwright-status.txt', status);
              // exit zero so this step doesn't stop the job (we'll check status later)
              process.exit(0);
            }
          })();
          NODE

      - name: Check Playwright status
        id: check_status
        run: |
          set -euo pipefail
          if [ -f playwright-status.txt ]; then
            code=$(cat playwright-status.txt)
          else
            code=999
          fi
          echo "status=$code" >> "$GITHUB_OUTPUT"

      - name: Upload screenshot
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshot
          path: screenshot.png
          retention-days: 7

      - name: Fail if Playwright detected error
        if: steps.check_status.outputs.status != '0'
        run: |
          set -euo pipefail
          echo "Playwright check failed with status ${STATUS}" || true
          # print status for logs
          cat playwright-status.txt || true
          exit 1
